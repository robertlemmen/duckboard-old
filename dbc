#!/usr/bin/env perl6

use v6; 

use lib $*PROGRAM.dirname.IO.child("lib").path;

use HTTP::Client;
use JSON::Tiny;
use File::Temp;

my $c = HTTP::Client.new;
my $host = '0.0.0.0';
my $port = 6001;

sub list-domains() {
    my $res = $c.get("http://$host:$port/api/v1/items");
    say $res.content;
}

sub make-domain($domain) {
    my $rq = $c.put;
    $rq.url("http://$host:$port/api/v1/items/$domain");
    my $res = $rq.run;
    say $res.content;
}

sub list-sortings($domain) {
    my $res = $c.get("http://$host:$port/api/v1/sortings/$domain");
    say $res.content;
}

sub make-sorting($domain, $sorting) {
    my $rq = $c.put;
    $rq.url("http://$host:$port/api/v1/sortings/$domain/$sorting");
    $rq.set-content(to-json({nid => 'root', filter => 'tag1/tag3', children => [
                                {nid => 'c1', filter => 'tag2' },
                                {nid => 'c2', filter => '' }
                        ]}));
    my $res = $rq.run;
    say $res.content;
}

sub list-boards($domain) {
    my $res = $c.get("http://$host:$port/api/v1/boards/$domain");
    say $res.content;
}

sub make-board($domain, $board) {
    my $rq = $c.put;
    $rq.url("http://$host:$port/api/v1/boards/$domain/$board");
    $rq.set-content(to-json({content => {
                                    type => 'sorted-board',
                                    sorting => 'sort1',
                                    overrides => {
                                    }
                                }}));
    my $res = $rq.run;
    say $res.content;
}

sub make-sample() {
    make-domain('sample');
    make-sorting('sample', 'sort1');
    make-board('sample', 'board1');
}

sub make-item($domain, $title) {
    my $rq = $c.post;
    $rq.url("http://$host:$port/api/v1/items/$domain");
    $rq.set-content(to-json({title => $title,
                             tags => '',
                                }));
    my $res = $rq.run;
    say $res.content;
}

sub edit-item($domain, $id) {
    my $rq = $c.get;
    $rq.url("http://$host:$port/api/v1/items/$domain/$id");
    my $res = $rq.run;
    my ($fname, $fhandle) = tempfile;
    if $res.success {
        # XXX out in temp file, edit vim EDITOR, put back
        my $data = from-json($res.content);
        $data{'id'}:delete;
        $fhandle.print(to-json($data));
        # XXX parse, remove id, pretty-print
        my $proc = shell "\$EDITOR $fname";
        $proc.sink;
        my $new-content = $fhandle.IO.slurp;
        $rq = $c.put;
        $rq.url("http://$host:$port/api/v1/items/$domain/$id");
        $rq.set-content($new-content);
        $res = $rq.run;
        say $res.status ~ " " ~ $res.message;
    }
    else {
        say $res.status ~ " " ~ $res.message;
    }
}

multi sub MAIN($command!, $arg = 'test', $arg2 = '') {
    if ($command eq 'list-domains') {
        list-domains;
    }
    elsif ($command eq 'make-domain') {
        make-domain($arg);
    }
    elsif ($command eq 'list-sortings') {
        list-sortings($arg);
    }
    elsif ($command eq 'make-sorting') {
        make-sorting($arg, 'sorting1');
    }
    elsif ($command eq 'list-boards') {
        list-boards($arg);
    }
    elsif ($command eq 'make-board') {
        make-board($arg, 'board1');
    }
    elsif ($command eq 'make-sample') {
        make-sample();
    }
    elsif ($command eq 'make-item') {
        make-item($arg, $arg2);
    }
    elsif ($command eq 'edit-item') {
        edit-item($arg, $arg2);
    }
}
