Duckboard Design
================

- domains that are entirely separate from each other
- separate layers for items/tickets and presentation on boards, with clean API each
- UI on top of that

Tags
----
- each item has a list of tags which are used to classify the item and are quite central
  to duckboard
- each tag can either be a name-value pair or a name only, which is just a short form
  for name=true
- a tag filter string is a set of predicates optionally groiuped and combined
  with and/or operators. a predicate anc check for presence, absence, value or
  unequals on a value
- we want to set this up so that both a tag and a tag filter string can be
  expressed in a URL unescaped

  unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
  tag           = +(unreserved)
                / +(unreserved) ":" +(unreserved)
  tags          = tag *( ";" tag)
  predicate     = tag
                / "!" tag
  filter        = predicate
                / "(" predicate ")"
                / predicate "+" predicate
                / predicate "/" predicate

Item Layer
----------
- each item has a unique (across domain) id
- each item has a set of standard field like "timestamp", "title", "tags",
  these are part of the "short" form
- each item can have other fields, which are only visible in the "long" form

- the server exposes a REST API:
  - GET /api/v1/items/<domain>              list of items in short form and current version
  - ...?at=<timestamp>                      version at given time
  - ...?filter=<filter>                     only return items that match filter,
                                            see above
  - GET /api/v1/items/<domain>/<id>         get specified item, timestamping as above
  - PUT /api/v1/items/<domain>/<id>         add new version to this item
  - POST /api/v1/items/<domain>             create new item, returning short form including "id"
  - GET /api/v1/items                       return a list of domains
XXX perhaps listing and creating domains should be under /domains/
  - PUT /api/v1/items/<domain>              create a new domain, no body
XXX changes since timestamp, with long-poll
XXX how can we get list of versions for an item? argument? different endpoint?

- the server can store the items in a flat directory structure:
  .../store/<domain>/items/<id>/<timestamp>  would be an actual item
  .../store/<domain>/items/<id>/<latest>     would be a symlink to the current version
  .../store/<domain>/lock                    is a filesystem lock taked for writing operations
                                             on this domain, writing is done in a way that makes
                                             reading safe in all cases
  .../store/lock                             lock used to add to the set of domains

- when a item gets updated, the timestamp of the <id> directory is changed, so processes
  can use that to invalidate local caches, which means multiple processes can run of the same
  underlying store!

- our store exposes an interface for items:
  list(:domain, :at = Nil) -> [short-item]
  get(:domain, :id, :at = Nil) -> item
  put(:domain, :id, :item, :old-timestamp) -> XXX
  create(:domain, :id, :item) -> short-item
  get-versions(:domain, :id) -> [short-item]

XXX at some point in the future we could introduce a special "archived" property
that is used at the store layer to separate the 90% used form the rest, unclear
at the moment whether that is necesary

Sort Layer
----------
- each domain can have a set of "sortings", which organises items by tags
- each sort is a tree, where each node is a sorting itself, each node adding constraints
  to the items that it or the children will contain.
- this allows sorting items through the tree into the leaf nodes, items are shown in leaf
  nodes if they satisfy all predicates towards the root from this leaf
- the predicates are based on tags
- an API allows configuring the sort, as well as getting a list of items sorted
- the API allows modification of items by moving them from one leaf to another. the server
  computes the necessary tag changes
XXX ordering within a sort leaf
XXX changes with long-poll
XXX sample JSON and details

- the API would then look like:
  - GET /api/v1/sortings/<domain>          list sortings available
  - ...?filter=<filter>                    restrict items to those that match this filter
                                           on top of the filtering/sorting from the
                                           sorting
  - GET /api/v1/sortings/<domain>/<id>     get sort specification
  - PUT /api/v1/sortings/<domain>/<id>     update sort specification, create if
                                           necessary
  - GET /api/v1/sorted/<domain>/<id>       get items from this domain sorted
                                           by sort <id>
XXX this one accepts PUT without previous existence, the other one doesn't
    perhaps this should be consistent?
XXX at

Board Layer
-----------
- each domain can have a set of "boards"
- each board consists of a set of widgets, some of which are layout components like grids
- an important widget represents a sorting from the sort layer as a configurable grid.
XXX API
XXX JSON structure, needs to be extensible. start with "sorted" part


UI Layer
--------
- any path that does start with /ui is used for the graphical UI
  - /ui                             lists the domains 
  - /ui/<domain>                    lists the boards of this domain
  - /ui/<domain>/<board>            renders the board in question
- this will require some files to be accessible under /static as well, css, js, images ...
